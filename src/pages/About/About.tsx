import React from 'react';

import { Box } from '@chakra-ui/react';

export const About: React.FC = () => {
	return <Box>
		<p>
			This is a tool for working with TON TL-B schema. It allows you to generate Typescript code from TL-B schema using <a href="https://github.com/ton-community/tlb-codegen" style={{ color: 'blue' }}>tlb-codegen</a>.
			You can find documentation about TL-B schema <a href="https://docs.ton.org/develop/data-formats/tl-b-language" style={{ color: 'blue' }}>here</a>. 
			Also advanced docs are available <a href="https://docs.ton.org/develop/data-formats/tl-b-types" style={{ color: 'blue' }}>here</a>.
			Besides generating code, you can also convert your data in base64 format to JSON and vice versa according to the schema. 
			As well, you can enjoy hex format of the data.
		</p>
		<h3>Example: CoolMessage</h3>
		You can play with this example here: <a href="https://polyprogrammist.github.io/tlb-editor/#/main?tlb=LYUwzmCGDmIMQGYBmBWALAdgGwGNIAIA3SAGwFcQAuOfAXnwGEB7JkgWXClgG4g&type=MIexBsFkFMGdYIYHNpA&base64=&json=N4KAkARA1glgdgEwgLgAQQMIHssBsCyApgM7ECGA5oRADTgQBuZuArtWgIwgC+QA" style={{ color: 'blue' }}>here</a>.
		<br/>
		Schema:
		<pre>
			{`
				message#3f5476ca value:# = CoolMessage;
			`}
		</pre>
		When you insert the schema, the typescript code is generated:
		<pre>
			{`
export interface CoolMessage {
    readonly kind: 'CoolMessage';
    readonly value: number;
}

export function loadCoolMessage(slice: Slice): CoolMessage {
    if (((slice.remainingBits >= 32) && (slice.preloadUint(32) == 0x3f5476ca))) {
        slice.loadUint(32);
        let value: number = slice.loadUint(32);
        return {
            kind: 'CoolMessage',
            value: value,
        }

    }
    throw new Error('Expected one of "CoolMessage" in loading "CoolMessage", but data does not satisfy any constructor');
}

export function storeCoolMessage(coolMessage: CoolMessage): (builder: Builder) => void {
    return ((builder: Builder) => {
        builder.storeUint(0x3f5476ca, 32);
        builder.storeUint(coolMessage.value, 32);
    })

}
			`}
		</pre>
		You can use this code in your typescript project to serialize and deserialize CoolMessage data.
		<br/>
		When you choose a type CoolMessage from types dropdown, the default JSON is generated:
		<pre>
			{`
				{
					"kind": "CoolMessage",
					"value": 1
				}
			`}
		</pre>
		When you insert the JSON, the base64 format is generated:
		<pre>
			{`
				te6cckEBAQEACgAAED9UdsoAAAABXN7Z8Q==
			`}
		</pre>

		Other examples: <a href="https://polyprogrammist.github.io/tlb-editor/#/main?tlb=LYUwzmCGDmIMQGYBmBWALAdgGwGNIAIA3SAGwFcQAuOfAXnwGEB7JkgWXClgG4g&type=MIexBsFkFMGdYIYHNpA&base64=C4UwbAxhDWCiBCBBAirRBhA5oxsAiAnAKoAmAzgPY47wAaAcgOwBaAHMgLwdA&json=N4KAkARA1glgdgEwgLgAQQMIHssBsCyApgM7ECGA5oRADTgQBuZuArtWgIwgC+QA" style={{ color: 'blue' }}>Block</a>, <a href="https://polyprogrammist.github.io/tlb-editor/#/main?tlb=&type=MIewtmIHYLIM4HMCSUBmIBKBTANgQwA8sATIA&base64=C4UwbAxhDWCiBCBBAirRBZA5oxANA7gJI4mlnkWVXWWYBGAnAPYCq0AvEA&json=N4KAkARA1glgdgEwgLgAQQMIHsC2OtwCyAzgOYCScAZlgEoCmANgIYAe9CA+vAC6c5lu1LBAA04CDAAWAJ04IYxZgCNGHFKirNGxeuMjKsAVzgBjehq069EwyfNI0V3fojEZpjXCONGrhPTEPBoQAAzIoZFR0TGxcfEJiQliEgBu2kYWaKBgkLCIIRhGMjL0ZgCe2L70pjwwBCm5EKQyzAIhoY2QWDxS9DIaOU35jugAoqw8rUUlZaaVWNW19XBdkAq1gwC+4GA7e67SclT0WeidrlQA7lwnZ2GNEKalzDwcnIzBaKGuz-Sv71eGlCIC2QA" style={{ color: 'blue' }}>CommonMsgInfoRelaxed</a>
		<br/>
		<h3>Limitations</h3>
		<h5>Types with parameters</h5>
		Please note that types with parameters are not supported. For example, the following type is not supported:
		<pre>
			{`
			nothing$0 {X:Type} = Maybe X;
			just$1 {X:Type} value:X = Maybe X;
			`}
		</pre>
		In order to still use the type, you can define a new type without parameters that uses Maybe type:
		<pre>
			{`
			nothing$0 {X:Type} = Maybe X;
			just$1 {X:Type} value:X = Maybe X;

			user$_ t:(Maybe int32) = MaybeUser;
			`}
		</pre>
		It will generate the Maybe type and data accordingly.
		<h5>Default JSON generation for types that have conditions</h5>
		You can't generate default JSON for types with conditions. However the code will be generated correctly, and you can serialize and deserialize data.
		For example, generating default JSON for the following type is not supported:
		<pre>
			{`
			cond$0 n:# {n < 0} = ConditionType;
			`}
		</pre>
		Please note it may be the case that the default JSON is still generated for some conditions that are easily matched.
	</Box>;
};
